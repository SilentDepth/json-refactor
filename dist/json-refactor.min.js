function parser(a,b,c=!1){let h,i,d=a,e='',f=b.split('.'),g=f.length;if(f.forEach((j,k)=>{[,e,i,i]=/(.+?)(\[(\d+)?])?$/.exec(j),h&&(c&&!(d[e]instanceof Array)&&(d[e]=[]),d=d[e],e=i||d.length),k<g-1&&(c&&!d[e]&&(d[e]={}),d=d[e])}),d)return{parent:d,key:e}}function getter(a,b){let c=b,d=!1;/\[]$/.test(c)&&(d=!0,c=c.slice(0,-2));let e=parser(a,c);if(e)return{needIteration:d,value:e.parent[e.key]}}function setter(a,b,c=null,d=!1){if(c===void 0){if(!d)return;}else if('function'==typeof b){let f=b(c);if(void 0===f)return;({key:b,value:c}=f)}else /^!/.test(b)?(c=0<=['1','true','yes','t','y'].indexOf((''+c).toLowerCase()),/^!!/.test(b)?b=b.slice(2):(b=b.slice(1),c=!c)):/^\+/.test(b)&&(b=b.slice(1),c=+c);let e=parser(a,b,!0);e.parent[e.key]=c instanceof Object?JSON.parse(JSON.stringify(c)):c}const CONFIG_KEY='__json-refactor__';function jsonRefactor(a,b,c={}){const{setUndefined:d=!1}=b[CONFIG_KEY]||{},e=Reflect.ownKeys(b).filter(f=>f!==CONFIG_KEY);return e.forEach(f=>{let g=getter(a,f);void 0===g.value&&!d||(g.needIteration?g.value.forEach(h=>{let i=jsonRefactor(h,b[f].map);setter(c,b[f].key,i,d)}):setter(c,b[f],g.value,d))}),c}export default jsonRefactor;

//# sourceMappingURL=json-refactor.min.js.map